---
- name: Check {{ nextcloud_version_path }} path
  ansible.builtin.stat:
    path: "{{ nextcloud_version_path }}"
  register: nextcloud_release

- name: Create {{ nextcloud_version_path }} directory
  ansible.builtin.file:
    state: directory
    path: "{{ nextcloud_version_path }}"
    owner: "{{ nextcloud_php_user }}"
    group: "{{ nextcloud_php_user }}"
    mode: 0755
  when: not nextcloud_release.stat.exists

- name: Download nextcloud {{ nextcloud_version }} archive
  ansible.builtin.unarchive:
    remote_src: true
    src: https://download.nextcloud.com/server/releases/nextcloud-{{ nextcloud_version }}.tar.bz2
    dest: "{{ nextcloud_version_path }}"
    owner: "{{ nextcloud_php_user }}"
    group: "{{ nextcloud_php_user }}"
  when: not nextcloud_release.stat.exists

# Do not use occ status here cause it relies on a proper config.php
- name: Get long nextcloud version
  become: true
  become_user: "{{ nextcloud_php_user }}"
  ansible.builtin.shell: |
    set -o pipefail
    sed -rn "s/.*Version = array\((.*)\);/\1/p" "{{ nextcloud_version_path }}/nextcloud/version.php" |
    sed "s/,/./g"
  args:
    executable: /bin/bash
  register: nextcloud_long_version
  changed_when: false

# Do not use occ status here cause it relies on a proper config.php
- name: Check if nextcloud is installed
  community.mysql.mysql_query:
    login_db: "{{ nextcloud_dbname }}"
    login_host: "{{ nextcloud_dbhost }}"
    login_user: "{{ nextcloud_dbuser }}"
    login_password: "{{ nextcloud_dbpassword }}"
    query: show tables like 'oc_users'
  register: nextcloud_is_installed
  changed_when: false

- name: Check actual symlink
  ansible.builtin.stat:
    path: "{{ nextcloud_current_path }}"
  register: nextcloud_symlink
  failed_when: false
  changed_when: false

- name: Stop php-fpm service
  ansible.builtin.service:
    name: php{{ nextcloud_php_version }}-fpm
    state: stopped
  when: nextcloud_symlink.stat.islnk is not defined or
        nextcloud_symlink.stat.lnk_target != nextcloud_version_path

- name: Update symlink
  ansible.builtin.file:
    state: link
    path: "{{ nextcloud_current_path }}"
    src: "{{ nextcloud_version_path }}"
  register: nextcloud_symlink_updated
  when: nextcloud_symlink.stat.islnk is not defined or
        nextcloud_symlink.stat.lnk_target != nextcloud_version_path

- name: Create symlink to config.php when nextcloud is already installed
  ansible.builtin.file:
    state: link
    path: "{{ nextcloud_current_path }}/nextcloud/config/config.php"
    src: "{{ nextcloud_shared_path }}/config.php"
    force: true
  when:
    - nextcloud_symlink.stat.islnk is not defined or
      nextcloud_symlink.stat.lnk_target != nextcloud_version_path
    - nextcloud_is_installed.rowcount != [0]

- name: Install nextcloud
  become: true
  become_user: "{{ nextcloud_php_user }}"
  ansible.builtin.command: >
    "{{ nextcloud_php_bin_path }}" occ maintenance:install
      --database "mysql"
      --database-name "{{ nextcloud_dbname }}"
      --database-host "{{ nextcloud_dbhost }}"
      --database-user "{{ nextcloud_dbuser }}"
      --database-pass "{{ nextcloud_dbpassword }}"
      --admin-user "{{ nextcloud_admin_user }}"
      --admin-pass "{{ nextcloud_admin_password }}"
      --data-dir "{{ nextcloud_datadirectory }}"
  args:
    chdir: "{{ nextcloud_current_path }}/nextcloud"
  when: nextcloud_is_installed.rowcount == [0]
  no_log: "{{ nextcloud_no_log }}"

# Need to remove config_is_read_only from config.php before running occ upgrade
# https://github.com/nextcloud/server/issues/32291
- name: Remove config_is_read_only from config.php before running occ upgrade (only when nextcloud is already installed)
  ansible.builtin.replace:
    path: "{{ nextcloud_shared_path }}/config.php"
    regexp: ".*config_is_read_only.*"
    replace: ""
  when:
    - nextcloud_symlink.stat.islnk is not defined or
      nextcloud_symlink.stat.lnk_target != nextcloud_version_path
    - nextcloud_is_installed.rowcount != [0]

- name: Run occ upgrade
  become: true
  become_user: "{{ nextcloud_php_user }}"
  ansible.builtin.command: "{{ nextcloud_php_bin_path }} occ upgrade"
  args:
    chdir: "{{ nextcloud_current_path }}/nextcloud"
  when: nextcloud_symlink.stat.islnk is not defined or
        nextcloud_symlink.stat.lnk_target != nextcloud_version_path

- name: Create config.php in {{ nextcloud_shared_path }}
  ansible.builtin.template:
    src: "{{ nextcloud_config_template }}"
    dest: "{{ nextcloud_shared_path }}/config.php"
    owner: "{{ nextcloud_php_user }}"
    group: "{{ nextcloud_php_user }}"
    mode: 0600
  register: nextcloud_config_update
  no_log: "{{ nextcloud_no_log }}"

- name: Create symlink to config.php when this is the first installation
  ansible.builtin.file:
    state: link
    path: "{{ nextcloud_current_path }}/nextcloud/config/config.php"
    src: "{{ nextcloud_shared_path }}/config.php"
    force: true
  when: nextcloud_is_installed.rowcount == [0]

- name: Start php-fpm service
  ansible.builtin.service:
    name: php{{ nextcloud_php_version }}-fpm
    state: started

- name: Create systemd service for Background jobs
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0644
  loop:
    - nextcloudcron.service
    - nextcloudcron.timer

- name: Ensure systemd service for Background jobs is enabled
  ansible.builtin.service:
    name: nextcloudcron.timer
    enabled: true
    state: started
